import pandas as pd
import numpy as np
%matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns
pd.set_option('display.max_columns', 500)


import json 

data_saison = json.load(open("D:\Documents\Recherche d'emplois\Formation\Datascientest\Projet\Datas\season17-18/season_match_stats.json"))

table = []

for index, value in data_saison.items():
    ligne = [index] + list(value.values())  
    table.append(ligne)
    
df_saison = pd.DataFrame(table, columns = ['id_match', 'home_team_id', 'away_team_id', 'home_team_name', 'away_team_name', 'date_string', 'half_time_score', 'full_time_score'])
df_saison.head()


data_match = json.load(open("D:\Documents\Recherche d'emplois\Formation\Datascientest\Projet\Datas\season17-18\season_stats.json",encoding='utf-8'))

table = []

for index, value in data_match.items():
    home = dict(list(value.values())[0])
    ligne = [index] + list(home['team_details'].values())  
    table.append(ligne)
    
df_match_home = pd.DataFrame(table, columns = ['id_match', 'team_id_home', 'team_name_home', 'team_rating_home', 'date'])

compteur = 0
for index, value in data_match.items():
    home = dict(list(value.values())[0])
    
    for i,j in home['aggregate_stats'].items() :
        df_match_home.loc[compteur, i] = j
         
    compteur += 1
    
print("dataframe des equipes à domicile :")    
df_match_home.head()




table = []

for index, value in data_match.items():
    away = dict(list(value.values())[1])
    ligne = [index] + list(away['team_details'].values())  
    table.append(ligne)
    
df_match_away = pd.DataFrame(table, columns = ['id_match', 'team_id_away', 'team_name_away', 'team_rating_away', 'date'])

compteur = 0
for index, value in data_match.items():
    away = dict(list(value.values())[1])
    
    for i,j in away['aggregate_stats'].items() :
        df_match_away.loc[compteur, i] = j
         
    compteur += 1
    
print("dataframe des equipes à l'extérieur :")    
df_match_away.head()



# YD - À partir de là c'est ce que j'ai fait

df_1718 = pd.merge(df_match_home,df_match_away,how='left',on='id_match')
df_1718.head()

df_1718 = df_1718.fillna(0)
df_1718 = df_1718.sort_values(by='id_match',ascending=True)
df_1718.head()

# Changement des types des colonnes 
cols=[i for i in df_1718.columns if i not in ["team_name_home","team_rating_home","date_x",'possession_percentage_x','team_name_away','team_rating_away','date_y','possession_percentage_y']]
for column in cols:
    df_1718[column] = df_1718[column].astype(int)

cols=[i for i in df_1718.columns if i in ["team_name_home","date_x",'team_name_away','date_y']]
for column in cols:
    df_1718[column] = df_1718[column].apply(str)
    
cols=[i for i in df_1718.columns if i in ["team_rating_home",'possession_percentage_x','team_rating_away','possession_percentage_y']]
for column in cols:
    df_1718[column] = df_1718[column].apply(float)
    
df_1718.info()

a4_dims = (15, 15)
fig, ax = plt.subplots(figsize=a4_dims)
g=sns.catplot(ax=ax,x='team_name_home', y='team_rating_home', kind='violin', data=df_1718)  #,data['team_rating_home']
# plt.xticks(rotation=90)
g.set_xticklabels(rotation=90) # Je n'arrive pas à afficher les labels des axes à 90° pour une meilleure visibilité.
plt.show()



# Graphique montrant le nombre de buts marqués par rapport au nombre de tirs tentés
# a4_dims = (15, 15)
# fig, ax = plt.subplots(figsize=a4_dims)

functions_to_apply = {
    'total_scoring_att_x' : 'mean',
    'goals_x' : 'mean',
}

# Encodage du nom des clubs en 20 catégories
le=LabelEncoder()

df_1718.insert(3,'team_name_enc',le.fit_transform(df_1718['team_name_home']),True)
team_groupby=df_1718.groupby('team_name_home').agg(functions_to_apply)

df_1718.insert(3,'team_name_enc',le.fit_transform(df_1718['team_name_home']),True)
team_groupby=df_1718.groupby('team_name_home').agg(functions_to_apply)

# sns.relplot(x='total_scoring_att_x', y='goals_x',hue=df_1718, data=team_groupby,alpha=0.5,ax=ax)
# plt.show()
team_groupby['goal_attempt_ratio']=team_groupby['goals_x']/team_groupby['total_scoring_att_x']
team_groupby=team_groupby.sort_values('goal_attempt_ratio',ascending=False)
team_groupby.head(5)

# On remarque que les 3 équipes les plus efficientes au tir sont :
# - Manchester City
# - Arsenal
# - Everton


team_groupby=team_groupby.sort_values('total_scoring_att_x',ascending=False)
team_groupby.head(5)
# Les 3 équipes qui tentent le plus de tirs par match sont :
# - Liverpool
# - Chelsea
# - Tottenham

df_score=df_1718[['id_match','team_name_home','goals_x','goals_y','team_name_away']]
df_score.head()

df_score.insert(5,'winner',np.linspace(0,0,len(df_score['team_name_home'])))


# Ajout d'une colonne winner
for i in df_score['team_name_home'].index:
    
    if(df_score['goals_x'][i] > df_score['goals_y'][i]):
        df_score['winner'][i]=0#df_score['team_name_home'][i]  :  équivaut à 
    elif(df_score['goals_x'][i]  < df_score['goals_y'][i]):
        df_score['winner'][i]=1#df_score['team_name_away'][i]
    else:
        df_score['winner'][i]=2#'draw'
df_score.head(20)


#  Matrice de corrélation entre les variables (coefficients de Pearson)
df_corr = df_1718.drop(['team_name_home', 'date_x','team_name_away','date_y'],1)
df_corr['winner']=df_score['winner']
# df_corr.head()
a4_dims = (20, 20)
fig, ax = plt.subplots(figsize=a4_dims)
sns.heatmap(df_corr.corr(),ax=ax)

# Peu de variables sont corrélées à une des variables cibles 'winner'
# Les principales sont :
# - La note de l'équipe (variable que nous n'avons pas à l'avance pour un match défini)
# - Le nombre de but pour un match
